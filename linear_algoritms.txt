Вводятся два числа, которые присваиваются двум разным переменным.
Требуется в процессе выполнения программы обменять значения переменных друг на друга.
Решить данную задачу непосредственно, присвоив первой переменной значение второй,
а второй - значение первой, нельзя. Например, если a = 5, а b = 6, то выполнив выражение a = b, 
получим число 6, присвоенное обоим переменным, в то время как число 5 будет утеряно.
Следовательно, переменная b не сможет получить новое значение.

#include <stdio.h>
main() {
	int a,b,c;
	scanf("%d", &a);
	scanf("%d", &b);
	printf("a=%d; b=%d\n", a, b);
	c = a;
	a = b;
	b = c;
	printf("a=%d; b=%d\n", a, b);
}

or

#include <stdio.h>
main() {
	int a,b,c;
	scanf("%d", &a);
	scanf("%d", &b);
	printf("a=%d; b=%d\n", a, b);
	a = a + b;
	b = a - b;
	a = a - b;
	printf("a=%d; b=%d\n", a, b);
}


Алгоритм Евклида – это алгоритм нахождения наибольшего общего делителя (НОД) пары целых чисел.
Наибольший общий делитель (НОД) – это число, которое делит без остатка два числа и делится само без остатка на любой другой делитель данных двух чисел. Проще говоря, это самое большое число, на которое можно без остатка разделить два числа, для которых ищется НОД.

Описание алгоритма нахождения НОД делением

Большее число делим на меньшее.
Если делится без остатка, то меньшее число и есть НОД (следует выйти из цикла).
Если есть остаток, то большее число заменяем на остаток от деления.
Переходим к пункту 1.
Пример:
Найти НОД для 30 и 18.
30/18 = 1 (остаток 12)
18/12 = 1 (остаток 6)
12/6 = 2 (остаток 0). Конец: НОД – это делитель. НОД (30, 18) = 6

Исходный код на Python

a = 50
b = 130
 
while a!=0 and b!=0:
    if a > b:
        a = a % b
    else:
        b = b % a
 
print (a+b)

Нахождения НОД вычитанием

Из большего числа вычитаем меньшее.
Если получается 0, то значит, что числа равны друг другу и являются НОД (следует выйти из цикла).
Если результат вычитания не равен 0, то большее число заменяем на результат вычитания.
Переходим к пункту 1
